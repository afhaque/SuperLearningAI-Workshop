This file is a merged representation of the entire codebase, combined into a single document by Repomix.
The content has been processed where security check has been disabled.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Security check has been disabled - content may contain sensitive information
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.github/
  workflows/
    nextjs.yml
public/
  next.svg
  vercel.svg
src/
  api/
    APICalls.tsx
  app/
    globals.css
    layout.tsx
    page.tsx
  components/
    card/
      DayCard.tsx
    header/
      Header.tsx
    search/
      Search.tsx
      SearchResult.tsx
    table/
      TableRow.tsx
  util/
    Date.tsx
    IconCode.tsx
.eslintrc.json
.gitignore
next.config.js
package.json
postcss.config.js
README.md
tailwind.config.ts
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".github/workflows/nextjs.yml">
# Sample workflow for building and deploying a Next.js site to GitHub Pages
#
# To get started with Next.js see: https://nextjs.org/docs/getting-started
#
name: Deploy Next.js site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
      - name: Setup Pages
        uses: actions/configure-pages@v4
        with:
          # Automatically inject basePath in your Next.js configuration file and disable
          # server side image optimization (https://nextjs.org/docs/api-reference/next/image#unoptimized).
          #
          # You may remove this line if you want to manage the configuration yourself.
          static_site_generator: next
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
      - name: Build with Next.js
        run: ${{ steps.detect-package-manager.outputs.runner }} next build
      - name: Static HTML export with Next.js
        run: ${{ steps.detect-package-manager.outputs.runner }} next export
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./out

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
</file>

<file path="public/next.svg">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
</file>

<file path="public/vercel.svg">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 283 64"><path fill="black" d="M141 16c-11 0-19 7-19 18s9 18 20 18c7 0 13-3 16-7l-7-5c-2 3-6 4-9 4-5 0-9-3-10-7h28v-3c0-11-8-18-19-18zm-9 15c1-4 4-7 9-7s8 3 9 7h-18zm117-15c-11 0-19 7-19 18s9 18 20 18c6 0 12-3 16-7l-8-5c-2 3-5 4-8 4-5 0-9-3-11-7h28l1-3c0-11-8-18-19-18zm-10 15c2-4 5-7 10-7s8 3 9 7h-19zm-39 3c0 6 4 10 10 10 4 0 7-2 9-5l8 5c-3 5-9 8-17 8-11 0-19-7-19-18s8-18 19-18c8 0 14 3 17 8l-8 5c-2-3-5-5-9-5-6 0-10 4-10 10zm83-29v46h-9V5h9zM37 0l37 64H0L37 0zm92 5-27 48L74 5h10l18 30 17-30h10zm59 12v10l-3-1c-6 0-10 4-10 10v15h-9V17h9v9c0-5 6-9 13-9z"/></svg>
</file>

<file path="src/api/APICalls.tsx">
//https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current=temperature_2m,weather_code,wind_speed_10m&hourly=temperature_2m,apparent_temperature,precipitation,weather_code,wind_speed_10m&daily=weather_code,temperature_2m_max,temperature_2m_min,apparent_temperature_max,apparent_temperature_min,precipitation_sum&precipitation_unit=inch&timeformat=unixtime&timezone=GMT
"use server";

import axios from "axios";

export type CurrentWeatherType = {
  currentTemp: number;
  highTemp: number;
  lowTemp: number;
  highFeelsLike: number;
  lowFeelsLike: number;
  windSpeed: number;
  precip: number;
  iconCode: number;
};

export type DailytWeatherType = {
  timestamp: number;
  iconCode: number;
  maxTemp: number;
};

export type HourlyWeatherType = {
  timestamp: number;
  iconCode: number;
  maxTemp: number;
  feelsLike: number;
  windSpeed: number;
  precip: number;
};

export type CitySearchType = {
  id: number;
  name: string;
  latitude: number;
  longitude: number;
};

export async function getWeather(
  lat: number,
  lon: number,
  timezone: string
  // Promise<{current:object, daily:object, hourly:object}> {
): Promise<{
  current: CurrentWeatherType;
  daily: DailytWeatherType[];
  hourly: HourlyWeatherType[];
}> {
  "use server";

  return await axios
    .get(
      "https://api.open-meteo.com/v1/forecast?current=temperature_2m,weather_code,wind_speed_10m&hourly=temperature_2m,apparent_temperature,precipitation,weather_code,wind_speed_10m&daily=weather_code,temperature_2m_max,temperature_2m_min,apparent_temperature_max,apparent_temperature_min,precipitation_sum&precipitation_unit=inch&timeformat=unixtime",
      {
        params: {
          latitude: lat,
          longitude: lon,
          timezone,
        },
      }
    )
    .then((response) => {
      //OR then(({data}))
      return {
        current: parseCurrentWeather(response.data),
        daily: parseDailyWeather(response.data),
        hourly: parseHourlyWeather(response.data),
      };
    });

  // return resp.data;
}

// export async function getTestData(): Promise<any> {
//   "use server";
//   const res = await fetch(
//     "https://api.open-meteo.com/v1/forecast?latitude=52.52&longitude=13.41&current=temperature_2m,weather_code,wind_speed_10m&hourly=temperature_2m,apparent_temperature,precipitation,weather_code,wind_speed_10m&daily=weather_code,temperature_2m_max,temperature_2m_min,apparent_temperature_max,apparent_temperature_min,precipitation_sum&precipitation_unit=inch&timeformat=unixtime&timezone=GMT"
//   );
//   const data = await res.json();
//   return data;
// }

function parseCurrentWeather({ current, daily }: any): CurrentWeatherType {
  const {
    temperature_2m: currentTemp,
    wind_speed_10m: windSpeed,
    weather_code: iconCode,
  } = current;
  const {
    temperature_2m_max: [maxTemp],
    temperature_2m_min: [minTemp],
    apparent_temperature_max: [maxFeelsLike],
    apparent_temperature_min: [minFeelsLike],
    precipitation_sum: [precip],
  } = daily;

  // temperature_2m: [maxTemp] same as const maxTemp = daily.temperature_2m[0]
  return {
    currentTemp: Math.round(currentTemp),
    highTemp: Math.round(maxTemp),
    lowTemp: Math.round(minTemp),
    highFeelsLike: Math.round(maxFeelsLike),
    lowFeelsLike: Math.round(minFeelsLike),
    windSpeed: Math.round(windSpeed),
    precip: Math.round(precip * 100) / 100,
    iconCode: iconCode,
  };
}

function parseDailyWeather({ daily }: any): DailytWeatherType[] {
  return daily.time.map((time: number, index: number) => {
    return {
      timestamp: time * 1000, //second to milliseconds
      iconCode: daily.weather_code[index],
      maxTemp: Math.round(daily.temperature_2m_max[index]),
    };
  });
}

function parseHourlyWeather({ hourly, current }: any): HourlyWeatherType[] {
  console.log(current.time * 1000);
  return hourly.time
    .map((time: number, index: number) => {
      return {
        timestamp: time * 1000,
        iconCode: hourly.weather_code[index],
        maxTemp: Math.round(hourly.temperature_2m[index]),
        feelsLike: Math.round(hourly.apparent_temperature[index]),
        windSpeed: Math.round(hourly.wind_speed_10m[index]),
        precip: Math.round(hourly.precipitation[index] * 100) / 100,
      };
    })
    .filter(({ timestamp }: any) => timestamp >= current.time * 1000);
}

export async function getCities(cityName: string): Promise<CitySearchType[]> {
  "use server";

  return await axios
    .get(
      "https://geocoding-api.open-meteo.com/v1/search?count=3&language=en&format=json",
      {
        params: {
          name: cityName,
        },
      }
    )
    .then((response) => {
      //OR then(({data}))
      return parseCityData(response.data);
    });
}

function parseCityData(data: any): CitySearchType[] {
  // data: {results: {id:number, name:string}[]}
  return data.results?.map((item: any) => {
    return {
      id: item.id,
      name: item.name,
      latitude: item.latitude,
      longitude: item.longitude,
    };
  }) ?? [];
}
</file>

<file path="src/app/globals.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

*, *::after, *::before{
  box-sizing: border-box;
}

:root {
  --background-color: 200, 100%, 85%;
  --foreground-color: 200, 100%, 10%; 
  --foreground-secondary-color: 200, 100%, 20%
  --even-row-color: 200, 60%, 70%
  --odd-row-color: 200, 60%, 75%
}

body {
  margin: 0;
  background-color: hsl(var(--background-color));
  color: hsl(var(--foreground-color));
}
</file>

<file path="src/app/layout.tsx">
import type { Metadata } from 'next'
import { Inter } from 'next/font/google'
import './globals.css'

const inter = Inter({ subsets: ['latin'] })

export const metadata: Metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body className={inter.className}>{children}</body>
    </html>
  )
}
</file>

<file path="src/app/page.tsx">
"use client";

import {
  CitySearchType,
  CurrentWeatherType,
  DailytWeatherType,
  HourlyWeatherType,
  getWeather,
} from "@/api/APICalls";
import { FaMapMarkerAlt } from "react-icons/fa";
import { useCallback, useEffect, useState } from "react";
import DayCard from "../components/card/DayCard";
import Header from "../components/header/Header";
import TableRow from "../components/table/TableRow";
import Search from "@/components/search/Search";
const HOURLY_DATA_DISPLAY_LIMIT: number = 10;

export default function Home() {
  const [currentData, setCurrentData] = useState<CurrentWeatherType>();
  const [dailyData, setDailyData] = useState<DailytWeatherType[]>([]);
  const [hourlyData, setHourlyData] = useState<HourlyWeatherType[]>([]);
  const [selectedResult, setSelectedResult] = useState<CitySearchType>(
    {} as CitySearchType
  );
  const [currentHourlyDispayIndex, setCurrentHourlyDispayIndex] =
    useState<number>(0);
  const [hourlyDisplayData, setHourlyDisplayData] = useState<
    HourlyWeatherType[]
  >([]); 
  const [location, setLocation] = useState<{
    latitude: number;
    longitude: number;
  }>({ latitude: 10, longitude: 10 });

  useEffect(() => {
    if ("geolocation" in navigator) {
      navigator.geolocation.getCurrentPosition(
        ({ coords }) => {
          const { latitude, longitude } = coords;
          setLocation({ latitude, longitude });
        },
        (error) => {
          alert(
            "There was an error getting your location. Please allow to use your location and refresh the page."
          );
        }
      );
    }
  }, []);

  const limitHourlyData = useCallback(
    (data: HourlyWeatherType[]) => {
      const newData = data.slice(
        0,
        HOURLY_DATA_DISPLAY_LIMIT + currentHourlyDispayIndex
      );
      // setHourlyDisplayData(prevData => [...prevData, ...newData]);
      setHourlyDisplayData(newData);
    },
    [currentHourlyDispayIndex]
  );

  useEffect(() => {
    const getData = async () => {
      const latitude =
        Object.keys(selectedResult).length > 0
          ? selectedResult.latitude
          : location.latitude;
      const longitude =
        Object.keys(selectedResult).length > 0
          ? selectedResult.longitude
          : location.longitude;

      const weatherData = await getWeather(
        latitude,
        longitude,
        Intl.DateTimeFormat().resolvedOptions().timeZone
      );

      if (weatherData.current) {
        setCurrentData(weatherData.current);
      }

      if (weatherData.daily) {
        setDailyData(weatherData.daily);
      }

      if (weatherData.hourly) {
        limitHourlyData(weatherData.hourly);
        setHourlyData(weatherData.hourly);
      }
    };

    getData();
  }, [location, limitHourlyData, selectedResult]);

  function onClickResultHandler(item: CitySearchType): void {
    setSelectedResult(item);
  }

  // useEffect(() => {
  //   limitHourlyData(hourlyData);
  // }, [hourlyData, limitHourlyData]);

  // if(currentData == null || currentData == undefined){
  //   return '';
  // }

  return (
    // className="flex min-h-screen flex-col items-center justify-between p-24"
    <main className={`${currentData == null ? "blur-md" : ""} `}>
      {Object.keys(selectedResult).length > 0 && (
        <div className="flex justify-center items-center mt-6">
          <FaMapMarkerAlt className="w-6 h-6 object-contain"/>
          <div className="text-center pl-2 text-foregroundColor text-2xl font-medium ">
            {selectedResult.name}
          </div>
        </div>
      )}
      <Search
        latitude={location.latitude}
        longitude={location.longitude}
        onClickResultHandler={onClickResultHandler}
      />
      <Header
        currentTemp={currentData?.currentTemp}
        highTemp={currentData?.highTemp}
        lowTemp={currentData?.lowTemp}
        highFeelsLike={currentData?.highFeelsLike}
        lowFeelsLike={currentData?.lowFeelsLike}
        windSpeed={currentData?.windSpeed}
        precip={currentData?.precip}
        iconCode={currentData?.iconCode}
      />
      <section className="grid grid-cols-[repeat(auto-fit,100px)] gap-2 justify-center p-4">
        {dailyData.map((item, index) => (
          <DayCard
            key={index}
            iconCode={item.iconCode}
            timestamp={item.timestamp}
            degree={item.maxTemp}
            // className="border-red-600"
          />
        ))}
        {/* <DayCard
          // icon={<FaSun className="w-16 h-16" />}
          iconCode={999}
          day="Monday"
          degree={32}
        /> */}
      </section>

      <table className="w-full text-center border-spacing-0">
        <tbody>
          {hourlyDisplayData.map((item, index) => (
            <TableRow
              key={index}
              maxTemp={item.maxTemp}
              feelsLike={item.feelsLike}
              precip={item.precip}
              timestamp={item.timestamp}
              windSpeed={item.windSpeed}
              iconCode={item.iconCode}
            />
          ))}
        </tbody>
      </table>
      {hourlyDisplayData.length < hourlyData.length && (
        <div className="flex justify-center items-center my-5">
          <button
            onClick={() =>
              setCurrentHourlyDispayIndex(
                currentHourlyDispayIndex + HOURLY_DATA_DISPLAY_LIMIT
              )
            }
            className="p-4 m-4 border rounded-lg border-foregroundColor bg-foregroundColor text-white text-sm"
          >
            Load More
          </button>
        </div>
      )}
    </main>
  );
}
</file>

<file path="src/components/card/DayCard.tsx">
import { getIcon } from "@/util/IconCode";
import { IconType } from "react-icons";
import { FaSun } from "react-icons/fa";
import { formatTimestampToDay } from "@/util/Date";
import { DetailedHTMLProps, HTMLAttributes } from "react";
type dayCardProps = {
  // icon: React.ReactNode;
  iconCode: number | undefined;
  timestamp: number | undefined;
  degree: number;
} & DetailedHTMLProps<HTMLAttributes<HTMLDivElement>, HTMLDivElement>;

export default function DayCard({
  // icon = <FaSun className="w-16 h-16" />,
  iconCode = 999,
  timestamp = 999,
  degree = 32,
  ...props
}: dayCardProps) {
  const Icon = getIcon(iconCode);
  const dayDate = formatTimestampToDay(timestamp);

  return (
    <div className={`flex flex-col items-center justify-center border border-foregroundColor rounded-md p-0.5 ${props.className}`}>
      <div><Icon className="w-16 h-16" /></div>
      <div className="text-base text-foregroundSecondaryColor mt-0.5">
        {dayDate}
      </div>
      <div>{degree}&deg;</div>
    </div>
  );
}
</file>

<file path="src/components/header/Header.tsx">
import { getIcon } from "@/util/IconCode";

type HeaderProps = {
  currentTemp: number | undefined;
  highTemp: number | undefined;
  lowTemp: number | undefined;
  highFeelsLike: number | undefined;
  lowFeelsLike: number | undefined;
  windSpeed: number | undefined;
  precip: number | undefined;
  // Icon?: React.ReactNode; // IconType |  React.ReactNode
  iconCode: number | undefined;
};
  
export default function Header({
  currentTemp = 31,
  highTemp = 32,
  lowTemp = 9,
  highFeelsLike = 30,
  lowFeelsLike = 20,
  windSpeed = 9,
  precip = 0.1,
  iconCode = 999,
}: HeaderProps) {
  // let Icon:JSX.Element = IconCode(iconCode);
  const Icon = getIcon(iconCode);
  return (
    <header className="flex items-center my-4 mx-10">
      <div className="flex w-1/2 justify-center items-center m-0.5 p-0.5 border-r-2 border-foregroundColor">
        {/* {Icon} */}
        {Icon && <Icon className="w-20 h-20 object-contain" />}
        <div className="text-3xl ml-4">
          <span data-current-temp>{currentTemp}</span>&deg;
        </div>
      </div>
      <div className="grid w-1/2 gap-4 justify-around grid-cols-3 grid-rows-2">
        <div className="flex flex-col items-center">
          <div className="uppercase font-bold text-xs text-foregroundSecondaryColor">
            High
          </div>
          <div>
            <span data-current-high>{highTemp}</span>&deg;
          </div>
        </div>
        <div className="flex flex-col items-center">
          <div className="uppercase font-bold text-xs text-foregroundSecondaryColor">
            FL High
          </div>
          <div>
            <span data-current-fl-high>{highFeelsLike}</span>&deg;
          </div>
        </div>
        <div className="flex flex-col items-center ">
          <div className="uppercase font-bold text-xs text-foregroundSecondaryColor">
            Wind
          </div>
          <div>
            <span data-current-wind>{windSpeed}</span>
            <span className="font-normal text-sm">mph</span>
          </div>
        </div>
        <div className="flex flex-col items-center">
          <div className="uppercase font-bold text-xs text-foregroundSecondaryColor">
            Low
          </div>
          <div>
            <span data-current-low>{lowTemp}</span>&deg;
          </div>
        </div>
        <div className="flex flex-col items-center">
          <div className="uppercase font-bold text-xs text-foregroundSecondaryColor">
            FL Low
          </div>
          <div>
            <span data-current-fl-low>{lowFeelsLike}</span>&deg;
          </div>
        </div>
        <div className="flex flex-col items-center">
          <div className="uppercase font-bold text-xs text-foregroundSecondaryColor">
            Precip
          </div>
          <div>
            <span data-current-precip>{precip}</span>
            <span className="font-normal text-sm">in</span>
          </div>
        </div>
      </div>
    </header>
  );
}
</file>

<file path="src/components/search/Search.tsx">
import { useEffect, useState } from "react";
import SearchResult from "./SearchResult";
import { getCities, CitySearchType } from "@/api/APICalls";
type SearchProps = {
  latitude: number;
  longitude: number;
  onClickResultHandler: (item: CitySearchType) => void;
};

export default function Search({
  latitude = 10,
  longitude = 10,
  onClickResultHandler,
}: SearchProps) {
  const [searchValue, setSearchValue] = useState<string>("");
  const [searchResult, setSearchResult] = useState<CitySearchType[]>([]);
  const [selectedResult, setSelectedResult] = useState<CitySearchType>(
    {} as CitySearchType
  );
  useEffect(() => {
    if (searchValue.length >= 3) {
      const getSearchData = async () => {
        const result = await getCities(searchValue);
        setSearchResult(result);
      };
      getSearchData();
    } else {
      //set the serach results to empty array because there isnt any result for that length. this triggers the result dropdown to close.
      setSearchResult([]);
    }
  }, [searchValue]);

  // function setSearchResultValues(item: CitySearchType): void {
  //   setSelectedResult(item);
  //   onClickResultHandler(item);
  // }

  return (
    <div className="flex flex-col justify-center mb-10 mt-6 gap-2 mx-10 md:flex-row">
      <div className="flex flex-col">
        <label className="text-xs text-foregroundColor font-bold mb-1">
          Search City
        </label>
        <input
          className="rounded-md outline-none p-2 text-sm placeholder:text-xs"
          placeholder="Input City - Min 3 Characters"
          value={searchValue}
          onChange={(e) => setSearchValue(e.target.value)}
        />
        <div>
          <SearchResult
            searchResult={searchResult}
            onClickResultHandler={(item: CitySearchType) => {
              setSearchResult([]);
              setSelectedResult(item);
              onClickResultHandler(item);
            }}
          />
        </div>
      </div>
      <div className="flex flex-col">
        <label className="text-xs text-foregroundColor font-bold mb-1">
          Latitude
        </label>
        <input
          className="rounded-md outline-none p-2 text-sm"
          defaultValue={`${
            Object.keys(selectedResult).length > 0
              ? selectedResult.latitude
              : latitude
          }`}
          disabled
        />
      </div>
      <div className="flex flex-col">
        <label className="text-xs text-foregroundColor font-bold mb-1">
          Longitude
        </label>
        <input
          className="rounded-md outline-none p-2 text-sm"
          defaultValue={`${
            Object.keys(selectedResult).length > 0
              ? selectedResult.longitude
              : longitude
          }`}
          disabled
        />
      </div>
    </div>
  );
}
</file>

<file path="src/components/search/SearchResult.tsx">
import React, { Fragment, useState } from "react";
import { CitySearchType } from "@/api/APICalls";
// type SearchResultProps = {

// } & CitySearchType[];
export default function SearchResult({
  searchResult,
  onClickResultHandler,
}: {
  searchResult: CitySearchType[];
  onClickResultHandler: (item: CitySearchType) => void;
}) {
  // const [first, setfirst] = useState([{ id: "1", city:"london", latitude:38.4499712, longitude:27.230208 }, { id: "2", city:"london2", latitude:38.4499712, longitude:27.230208 }, { id: "3", city:"london3", latitude:38.4499712, longitude:27.230208 }]);

  // function onClickResultHandler(item:CitySearchType) {
  //   alert(item.name);
  // }

  const FragmentClickWrapper = ({ children, item }: any) => (
    <React.Fragment>
      {React.Children.map(children, (child) =>
        React.cloneElement(child, {
          onClick: () => onClickResultHandler(item),
        })
      )}
    </React.Fragment>
  );

  return (
    <div className={`relative ${searchResult.length > 0 ? "block" : "hidden"}`}>
      <div className="bg-gray-300 rounded-md my-2 p-2 bg-opacity-95 absolute left-0 top-0 w-full">
        <div className="grid grid-cols-3 gap-y-2">
          <div className="text-xs font-bold">City</div>
          <div className="ml-auto mr-2 text-xs font-bold">Latitude</div>
          <div className="ml-auto text-xs font-bold">Longitude</div>
          {searchResult.map((item, index) => {
            return (
              <FragmentClickWrapper key={item.id} item={item}>
                <div className="text-xs text-foregroundColor hover:cursor-pointer">{item.name}</div>
                <div className="ml-auto mr-2 text-xs text-foregroundColor hover:cursor-pointer">
                  {Math.round(item.latitude * 100) / 100}
                </div>
                <div className="mx-auto text-xs text-foregroundColor hover:cursor-pointer">
                  {Math.round(item.longitude * 100) / 100}
                </div>
              </FragmentClickWrapper>
            );
          })}
        </div>
      </div>
    </div>
  );
}
</file>

<file path="src/components/table/TableRow.tsx">
import { FaSun } from "react-icons/fa";
import { getIcon } from "@/util/IconCode";
import { formatTimestampToDay, formatTimestampToNumericHour } from "@/util/Date";

type TableRowProps = {
  timestamp: number | undefined;
  iconCode?: number | undefined;
  maxTemp: number | undefined;
  feelsLike: number | undefined;
  windSpeed: number | undefined;
  precip: number | undefined;
};

export default function TableRow({
  timestamp = 999,
  iconCode = 999,
  maxTemp = 31,
  feelsLike = 30,
  windSpeed = 19,
  precip = 0.1,
}: TableRowProps) {

  const Icon = getIcon(iconCode);
  const dayDate = formatTimestampToDay(timestamp);
  const hourDate = formatTimestampToNumericHour(timestamp);

  return (
    <tr className="[&>td]:p-2 [&>td>*]:gap-1 even:bg-sky-300/60 odd:bg-sky-300/30 ">
      {/* [&>*:nth-child(even)]:bg-borwn-50 */}
      <td>
        <div className="flex flex-col items-center ">
          <div className="uppercase font-bold text-xs text-foregroundSecondaryColor">{dayDate}</div>
          <div className="uppercase">{hourDate}</div>
        </div>
      </td>
      <td>
        {/* <FaSun className="w-12 h-12 object-contain" /> */}
        <Icon className="w-12 h-12 object-contain" />
      </td>
      <td>
        <div className="flex flex-col items-center">
          <div className="uppercase font-bold text-xs text-foregroundSecondaryColor">TEMP</div>
          <div>{maxTemp}&deg;</div>
        </div>
      </td>
      <td>
        <div className="flex flex-col items-center">
          <div className="uppercase font-bold text-xs text-foregroundSecondaryColor">FL TEMP</div>
          <div>{feelsLike}&deg;</div>
        </div>
      </td>
      <td>
        <div className="flex flex-col items-center">
          <div className="uppercase font-bold text-xs text-foregroundSecondaryColor">WIND</div>
          <div>
            {windSpeed}<span className="font-normal text-sm">mph</span>
          </div>
        </div>
      </td>
      <td>
        <div className="flex flex-col items-center">
          <div className="uppercase font-bold text-xs text-foregroundSecondaryColor">PRECIP</div>
          <div>
            {precip}<span className="font-normal text-sm">in</span>
          </div>
        </div>
      </td>
    </tr>
  );
}
</file>

<file path="src/util/Date.tsx">
const DAY_FORMATTER = new Intl.DateTimeFormat(undefined, { weekday: "long" });
const HOUR_FORMATTER = new Intl.DateTimeFormat(undefined, {hour: "numeric", minute: "numeric", hour12:true});

export function formatTimestampToDay(timestamp: number): string {
  let day = "";
  if (timestamp) {
    day = DAY_FORMATTER.format(timestamp);
  }
  return day;
}

export function formatTimestampToNumericHour(timestamp: number): string {
  let hour = "";
  if(timestamp){
    hour = HOUR_FORMATTER.format(timestamp);
  }

  return hour;
}
</file>

<file path="src/util/IconCode.tsx">
import { IconType } from "react-icons";
import {
  FaSun,
  FaCloudSun,
  FaCloud,
  FaSmog,
  FaCloudRain,
  FaCloudMoonRain,
  FaCloudSunRain,
  FaSnowflake,
  FaSnowman,
  FaBolt,
  FaCloudShowersHeavy,
} from "react-icons/fa";

export function getIcon(code: number): IconType {
  let IconComponent: IconType;

  switch (code) {
    case 0:
    case 1:
      IconComponent = FaSun;
      break;
    case 2:
      IconComponent = FaCloudSun;
      break;
    case 3:
      IconComponent = FaCloud;
      break;
    case 45:
    case 48:
      IconComponent = FaSmog;
      break;
    case 51:
    case 53:
    case 55:
      IconComponent = FaCloudRain;
      break;
    case 56:
    case 57:
      IconComponent = FaCloudMoonRain;
      break;
    case 61:
    case 63:
    case 65:
      IconComponent = FaCloudSunRain;
      break;
    case 66:
    case 67:
      IconComponent = FaCloudShowersHeavy;
      break;
    case 71:
    case 73:
    case 75:
      IconComponent = FaSnowflake;
      break;
    case 77:
      IconComponent = FaSnowman;
      break;
    case 80:
    case 81:
    case 82:
      IconComponent = FaCloudShowersHeavy;
      break;
    case 85:
    case 86:
      IconComponent = FaSnowflake;
      break;
    case 95:
      IconComponent = FaBolt;
      break;
    case 96:
    case 99:
      IconComponent = FaCloud;
      break;

    default:
      IconComponent = FaSun; // Provide a default icon or handle unknown codes
      break;
  }

  return IconComponent;
}

// export function GetIcon2({ code }: any) {
//   let IconComponent: IconType;

//   switch (code) {
//     case 0:
//     case 1:
//       IconComponent = FaSun;
//       break;
//     case 2:
//       IconComponent = FaCloudSun;
//       break;

//     default:
//       IconComponent = FaSun; // Provide a default icon or handle unknown codes
//       break;
//   }

//   return <IconComponent />;

//   // <GetIcon />
// }

// export function getIcon(code:number): IconType{
//   let IconComponent;

//   switch (code) {
//     case 0:
//     case 1:
//       IconComponent = FaSun;
//       break;
//     case 2:
//       IconComponent = FaCloudSun;
//       break;
//     default:
//       IconComponent = FaSun; // Provide a default icon or handle unknown codes
//       break;
//   }

//   return IconComponent;
// }
// function customIcon(icon:React.ReactNode): JSX.Element {
//   return (
//     <svg
//       className={`w-20 h-20 object-contain `} // Apply passed class names
//       xmlns="http://www.w3.org/2000/svg"
//       viewBox="0 0 20 20"
//       fill="currentColor"
//     >
//       {/*  icon content */}
//       {/* ... */}
//     </svg>
//   );
// };

// const weatherIconMap = {
//     51: FaCloudRain,
//     53: FaCloudRain,
// };
// const WeatherIcon = ({ code }) => {
//     const IconComponent = weatherIconMap[code] || DefaultIcon;

//     return <IconComponent />;
//   };
</file>

<file path=".eslintrc.json">
{
  "extends": "next/core-web-vitals"
}
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
</file>

<file path="next.config.js">
/** @type {import('next').NextConfig} */
const nextConfig = {
    reactStrictMode: false, //avoid calling the page.tsx twice
}

module.exports = nextConfig
</file>

<file path="package.json">
{
  "name": "weather-app",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "axios": "^1.6.2",
    "next": "14.0.4",
    "react": "^18",
    "react-dom": "^18",
    "react-icons": "^4.12.0"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "autoprefixer": "^10.0.1",
    "eslint": "^8",
    "eslint-config-next": "14.0.4",
    "postcss": "^8",
    "tailwindcss": "^3.3.0",
    "typescript": "^5"
  }
}
</file>

<file path="postcss.config.js">
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
</file>

<file path="README.md">
## Description

In this Next.js project, a weather app is developed with Tailwind CSS and Open-Meteo APIs for weather and search related data. It includes current, daily, and hourly weather data (temperature, high/low, feels-like, wind, precip) sourced from the open-meteo API. The app detects the user's city automatically through browser geolocation and allows manual city search.

## Demo
![Screenshot](public/images/snapshot-1.png)
<p float="left" align="center">
  <img src="public/images/snapshot-2.png" width="400" />
  <img src="public/images/snapshot-3.png" width="400" />
</p>

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

# Contributing
Contributions are welcome! If you have any ideas, suggestions, or bug reports, please create an issue or submit a pull request.

# License
This project is licensed under the MIT License.

## Acknowledgments
This Next.js Todo application was crafted by drawing inspiration from a variety of online resources and tutorials. Its creation has been driven by a thirst for learning, a desire to grasp new concepts and a determination to engage in research and development.
</file>

<file path="tailwind.config.ts">
import type { Config } from 'tailwindcss'

const config: Config = {
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      backgroundImage: {
        'gradient-radial': 'radial-gradient(var(--tw-gradient-stops))',
        'gradient-conic':
          'conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))',
      },
      colors: {
        backgroundColor: "hsl(var(--background-color))",
        foregroundColor: "hsl(var(--foreground-color))",
        foregroundSecondaryColor: "hsl(var(--foreground-secondary-color))",
        oddRowColor: "hsl(var(--odd-row-color))",
        evenRowColor: "hsl(var(--even-row-color))",
        brown: {
          50: '#fdf8f6',
        },
      },
    },
  },
  plugins: [],
}
export default config
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

</files>
